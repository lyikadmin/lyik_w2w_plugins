# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-03-31T11:37:23+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, EmailStr, Field, constr


class ADDRESSTYPE(Enum):
    RESIDENTIAL = "RESIDENTIAL"
    RESIDENTIAL_BUSINESS = "RESIDENTIAL_BUSINESS"
    BUSINESS_ADDRESS = "BUSINESS_ADDRESS"
    REGISTERED_OFFICE = "REGISTERED_OFFICE"
    UNSPECIFIED = "UNSPECIFIED"


class APPLICATIONTYPE(Enum):
    TRADING = "TRADING"
    DP = "DP"
    TRADING_AND_DP = "TRADING_AND_DP"
    TRADING_KTK = "TRADING_KTK"
    TRADING_AND_DP_KTK = "TRADING_AND_DP_KTK"


class APPDETDEFAULTS(Enum):
    number_5_0 = 5.0
    number_0_5 = 0.5
    number_6_0 = 6.0
    number_0_6 = 0.6
    number_7_0 = 7.0
    number_0_7 = 0.7
    number_100_0 = 100.0
    number_58_0 = 58.0
    number_0_1 = 0.1
    number_20_0 = 20.0
    number_52_0 = 52.0
    number_0_03 = 0.03
    number_10_0 = 10.0
    number_22_0 = 22.0


class BANKACCOUNTTYPE(Enum):
    SAVINGS = "SAVINGS"
    CURRENT = "CURRENT"


class CLIENTTYPEINDONLY(Enum):
    IND = "IND"


class CONSENTFORCOMMUNICATION(Enum):
    FIRST_HOLDER = "FIRST_HOLDER"
    ALL_HOLDERS = "ALL_HOLDERS"


class CONTRACTFORMAT1(Enum):
    PHYSICAL_FORM = "PHYSICAL_FORM"


class CONTRACTFORMAT2(Enum):
    ELECTRONIC_FORM = "ELECTRONIC_FORM"


class COUNTRY(Enum):
    INDIA = "INDIA"
    USA = "USA"


class COUNTRY3CODE(Enum):
    AFG = "AFG"
    ALB = "ALB"
    DZA = "DZA"
    ASM = "ASM"
    AND = "AND"
    AGO = "AGO"
    AIA = "AIA"
    ATA = "ATA"
    ATG = "ATG"
    ARG = "ARG"
    ARM = "ARM"
    ABW = "ABW"
    AUS = "AUS"
    AUT = "AUT"
    AZE = "AZE"
    BHS = "BHS"
    BHR = "BHR"
    BGD = "BGD"
    BRB = "BRB"
    BLR = "BLR"
    BEL = "BEL"
    BLZ = "BLZ"
    BEN = "BEN"
    BMU = "BMU"
    BTN = "BTN"
    BOL = "BOL"
    BES = "BES"
    BIH = "BIH"
    BWA = "BWA"
    BVT = "BVT"
    BRA = "BRA"
    IOT = "IOT"
    BRN = "BRN"
    BGR = "BGR"
    BFA = "BFA"
    BDI = "BDI"
    CPV = "CPV"
    KHM = "KHM"
    CMR = "CMR"
    CAN = "CAN"
    CYM = "CYM"
    CAF = "CAF"
    TCD = "TCD"
    CHL = "CHL"
    CHN = "CHN"
    CXR = "CXR"
    CCK = "CCK"
    COL = "COL"
    COM = "COM"
    COD = "COD"
    COG = "COG"
    COK = "COK"
    CRI = "CRI"
    HRV = "HRV"
    CUB = "CUB"
    CUW = "CUW"
    CYP = "CYP"
    CZE = "CZE"
    CIV = "CIV"
    DNK = "DNK"
    DJI = "DJI"
    DMA = "DMA"
    DOM = "DOM"
    ECU = "ECU"
    EGY = "EGY"
    SLV = "SLV"
    GNQ = "GNQ"
    ERI = "ERI"
    EST = "EST"
    SWZ = "SWZ"
    ETH = "ETH"
    FLK = "FLK"
    FRO = "FRO"
    FJI = "FJI"
    FIN = "FIN"
    FRA = "FRA"
    GUF = "GUF"
    PYF = "PYF"
    ATF = "ATF"
    GAB = "GAB"
    GMB = "GMB"
    GEO = "GEO"
    DEU = "DEU"
    GHA = "GHA"
    GIB = "GIB"
    GRC = "GRC"
    GRL = "GRL"
    GRD = "GRD"
    GLP = "GLP"
    GUM = "GUM"
    GTM = "GTM"
    GGY = "GGY"
    GIN = "GIN"
    GNB = "GNB"
    GUY = "GUY"
    HTI = "HTI"
    HMD = "HMD"
    VAT = "VAT"
    HND = "HND"
    HKG = "HKG"
    HUN = "HUN"
    ISL = "ISL"
    IND = "IND"
    IDN = "IDN"
    IRN = "IRN"
    IRQ = "IRQ"
    IRL = "IRL"
    IMN = "IMN"
    ISR = "ISR"
    ITA = "ITA"
    JAM = "JAM"
    JPN = "JPN"
    JEY = "JEY"
    JOR = "JOR"
    KAZ = "KAZ"
    KEN = "KEN"
    KIR = "KIR"
    PRK = "PRK"
    KOR = "KOR"
    KWT = "KWT"
    KGZ = "KGZ"
    LAO = "LAO"
    LVA = "LVA"
    LBN = "LBN"
    LSO = "LSO"
    LBR = "LBR"
    LBY = "LBY"
    LIE = "LIE"
    LTU = "LTU"
    LUX = "LUX"
    MAC = "MAC"
    MDG = "MDG"
    MWI = "MWI"
    MYS = "MYS"
    MDV = "MDV"
    MLI = "MLI"
    MLT = "MLT"
    MHL = "MHL"
    MTQ = "MTQ"
    MRT = "MRT"
    MUS = "MUS"
    MYT = "MYT"
    MEX = "MEX"
    FSM = "FSM"
    MDA = "MDA"
    MCO = "MCO"
    MNG = "MNG"
    MNE = "MNE"
    MSR = "MSR"
    MAR = "MAR"
    MOZ = "MOZ"
    MMR = "MMR"
    NAM = "NAM"
    NRU = "NRU"
    NPL = "NPL"
    NLD = "NLD"
    NCL = "NCL"
    NZL = "NZL"
    NIC = "NIC"
    NER = "NER"
    NGA = "NGA"
    NIU = "NIU"
    NFK = "NFK"
    MNP = "MNP"
    NOR = "NOR"
    OMN = "OMN"
    PAK = "PAK"
    PLW = "PLW"
    PSE = "PSE"
    PAN = "PAN"
    PNG = "PNG"
    PRY = "PRY"
    PER = "PER"
    PHL = "PHL"
    PCN = "PCN"
    POL = "POL"
    PRT = "PRT"
    PRI = "PRI"
    QAT = "QAT"
    MKD = "MKD"
    ROU = "ROU"
    RUS = "RUS"
    RWA = "RWA"
    REU = "REU"
    BLM = "BLM"
    SHN = "SHN"
    KNA = "KNA"
    LCA = "LCA"
    MAF = "MAF"
    SPM = "SPM"
    VCT = "VCT"
    WSM = "WSM"
    SMR = "SMR"
    STP = "STP"
    SAU = "SAU"
    SEN = "SEN"
    SRB = "SRB"
    SYC = "SYC"
    SLE = "SLE"
    SGP = "SGP"
    SXM = "SXM"
    SVK = "SVK"
    SVN = "SVN"
    SLB = "SLB"
    SOM = "SOM"
    ZAF = "ZAF"
    SGS = "SGS"
    SSD = "SSD"
    ESP = "ESP"
    LKA = "LKA"
    SDN = "SDN"
    SUR = "SUR"
    SJM = "SJM"
    SWE = "SWE"
    CHE = "CHE"
    SYR = "SYR"
    TWN = "TWN"
    TJK = "TJK"
    TZA = "TZA"
    THA = "THA"
    TLS = "TLS"
    TGO = "TGO"
    TKL = "TKL"
    TON = "TON"
    TTO = "TTO"
    TUN = "TUN"
    TUR = "TUR"
    TKM = "TKM"
    TCA = "TCA"
    TUV = "TUV"
    UGA = "UGA"
    UKR = "UKR"
    ARE = "ARE"
    GBR = "GBR"
    UMI = "UMI"
    USA = "USA"
    URY = "URY"
    UZB = "UZB"
    VUT = "VUT"
    VEN = "VEN"
    VNM = "VNM"
    VGB = "VGB"
    VIR = "VIR"
    WLF = "WLF"
    ESH = "ESH"
    YEM = "YEM"
    ZMB = "ZMB"
    ZWE = "ZWE"


class COUNTRYINDONLY(Enum):
    India = "India"


class DELIVERYMODE(Enum):
    PHYSICAL = "PHYSICAL"
    ELECTRONIC = "ELECTRONIC"


class DEPOSITORY(Enum):
    NSDL = "NSDL"
    CDSL = "CDSL"


class DISDELIVERY(Enum):
    WITH_AC_OPENING = "WITH_AC_OPENING"
    ON_REQUEST = "ON_REQUEST"


class DPTARIFFPLAN(Enum):
    YEARLY = "YEARLY"
    LIFETIME = "LIFETIME"
    BSDA = "BSDA"


class FREQUENCY(Enum):
    WEEKLY = "WEEKLY"
    MONTHLY = "MONTHLY"


class GENDER(Enum):
    M = "M"
    F = "F"
    T = "T"
    O = "O"


class IDTYPE(Enum):
    VOTER = "VOTER"
    PAN = "PAN"


class INCOME(Enum):
    UPTO_1L = "UPTO_1L"
    field_1_TO_5L = "1_TO_5L"
    field_5_TO_10L = "5_TO_10L"
    field_10_TO_25L = "10_TO_25L"
    field_25L_TO_1CR = "25L_TO_1CR"
    field_1CR_TO_5CR = "1CR_TO_5CR"


class INDIASTATES(Enum):
    ANDAMAN___NICOBAR_ISLANDS = "ANDAMAN & NICOBAR ISLANDS"
    ANDHRA_PRADESH = "ANDHRA PRADESH"
    ARUNACHAL_PRADESH = "ARUNACHAL PRADESH"
    ASSAM = "ASSAM"
    BIHAR = "BIHAR"
    CHANDIGARH = "CHANDIGARH"
    CHATTISGARH = "CHATTISGARH"
    DADRA___NAGAR_HAVELI = "DADRA & NAGAR HAVELI"
    DAMAN___DIU = "DAMAN & DIU"
    DELHI = "DELHI"
    GOA = "GOA"
    GUJARAT = "GUJARAT"
    HARYANA = "HARYANA"
    HIMACHAL_PRADESH = "HIMACHAL PRADESH"
    JAMMU___KASHMIR = "JAMMU & KASHMIR"
    JHARKHAND = "JHARKHAND"
    KARNATAKA = "KARNATAKA"
    KERALA = "KERALA"
    LAKSHADWEEP = "LAKSHADWEEP"
    MADHYA_PRADESH = "MADHYA PRADESH"
    MAHARASHTRA = "MAHARASHTRA"
    MANIPUR = "MANIPUR"
    MEGHALAYA = "MEGHALAYA"
    MIZORAM = "MIZORAM"
    NAGALAND = "NAGALAND"
    ODISHA = "ODISHA"
    PONDICHERRY = "PONDICHERRY"
    PUNJAB = "PUNJAB"
    RAJASTHAN = "RAJASTHAN"
    SIKKIM = "SIKKIM"
    TAMIL_NADU = "TAMIL NADU"
    TELANGANA = "TELANGANA"
    TRIPURA = "TRIPURA"
    UTTAR_PRADESH = "UTTAR PRADESH"
    UTTARAKHAND = "UTTARAKHAND"
    WEST_BENGAL = "WEST BENGAL"


class INTRODUCERSTATUS(Enum):
    CLIENT = "CLIENT"
    SUB_BROKER_OR_AP = "SUB_BROKER_OR_AP"
    REMISIER = "REMISIER"


class JOINTACCOUNTOPERATIONMODE(Enum):
    JOINTLY = "JOINTLY"
    ANY_ONE_HOLDER_OR_SURVIVORS = "ANY_ONE_HOLDER_OR_SURVIVORS"


class KITFORMAT1(Enum):
    PHYSICAL = "PHYSICAL"


class KITFORMAT2(Enum):
    ELECTRONIC = "ELECTRONIC"


class MINORNOMINEE(Enum):
    NOMINEE_IS_A_MINOR = "NOMINEE_IS_A_MINOR"


class NOTINREASON(Enum):
    COUNTRY_DOES_NOT_ISSUE_TIN = "COUNTRY_DOES_NOT_ISSUE_TIN"
    TIN_NOT_REQUIRED = "TIN_NOT_REQUIRED"
    OTHER = "OTHER"


class OCCUPATION(Enum):
    PRIVATE_SECTOR = "PRIVATE_SECTOR"
    PUBLIC_SECTOR = "PUBLIC_SECTOR"
    BUSINESS = "BUSINESS"
    GOVT_SERVICE = "GOVT_SERVICE"
    PROFESSIONAL = "PROFESSIONAL"
    HOUSEWIFE = "HOUSEWIFE"
    STUDENT = "STUDENT"
    AGRICULTURIST = "AGRICULTURIST"
    RETIRED = "RETIRED"
    OTHERS = "OTHERS"


class OPTION(Enum):
    YES = "YES"
    NO = "NO"


class OVDTYPE(Enum):
    VOTER = "VOTER"
    DL = "DL"
    PASSPORT = "PASSPORT"
    AADHAAR = "AADHAAR"


class PANAADHAARSEED(Enum):
    YES = "YES"
    NO = "NO"
    EXEMPTED = "EXEMPTED"


class POLICY(Enum):
    RISK_MANAGEMENT_POLICY = "RISK_MANAGEMENT_POLICY"


class POLITICALEXPO(Enum):
    PEP = "PEP"
    RELATED = "RELATED"
    nan = "nan"


class PROCESSINGTIME(Enum):
    SEBI_TNC = "SEBI_TNC"


class RELATIONSHIP(Enum):
    SELF = "SELF"
    SPOUSE = "SPOUSE"
    DEPENDENT_PARENT = "DEPENDENT_PARENT"
    DEPENDENT_CHILD = "DEPENDENT_CHILD"


class RESIDENCESTATUSRIONLY(Enum):
    RI = "RI"


class SAMEASPERM(Enum):
    SAME_AS_PERMANENT_ADDRESS = "SAME_AS_PERMANENT_ADDRESS"


class SEGMENTPREF1(Enum):
    EQUITY = "EQUITY"


class SEGMENTPREF2(Enum):
    FNO = "FNO"


class SEGMENTPREF3(Enum):
    CURRENCY = "CURRENCY"


class SEGMENTPREF4(Enum):
    COMMODITY = "COMMODITY"


class SEGMENTPREF5(Enum):
    MUTUAL_FUND = "MUTUAL_FUND"


class SEGMENTPREF6(Enum):
    SLB = "SLB"


class SMSALERT(Enum):
    TRUST_FACILITY_ON_MOBILE = "TRUST_FACILITY_ON_MOBILE"


class SMSALERTOPTION(Enum):
    FIRST_HOLDER = "FIRST_HOLDER"
    ALL_JOINT_HOLDER = "ALL_JOINT_HOLDER"
    NO = "NO"


class TRADINGEXP(Enum):
    NIL = "NIL"
    field_1_3YEARS = "1_3YEARS"
    field_3_6YEARS = "3_6YEARS"
    MORE_THAN_6YEARS = "MORE_THAN_6YEARS"


class W2WMARITALSTATUS(Enum):
    MARRIED = "MARRIED"
    SINGLE = "SINGLE"


class RootApplicationDetailsCashFutComoCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    cash_fut_como: Optional[str] = Field(
        None, description="Cash/ &Future/ Commodity Delivery", title=""
    )
    cash_minimum_paisa: Optional[int] = Field(None, title="Minimum Paisa")
    cash_in_percentage: Optional[float] = Field(None, title="In %")


class RootApplicationDetailsCashJobbingCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="Cash Jobbing", title="")
    cash_jobbing_minimum_paisa: Optional[int] = Field(None, title="Minimum Paisa")
    cash_jobbing_in_percentage: Optional[float] = Field(None, title="In %")


class RootApplicationDetailsClientContactDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    client_mobile: str = Field(..., title="Mobile")


class RootApplicationDetailsCommodityFuturesCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None, description="Commodity Futures", title=""
    )
    commodity_futures_minimum_paisa: Optional[int] = Field(None, title="Minimum Paisa")
    commodity_futures_in_percentage: Optional[float] = Field(None, title="In %")


class RootApplicationDetailsCommodityOptionsCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None, description="Commodity Options", title=""
    )
    commodity_options_rate: Optional[int] = Field(None, title="Rate (Rs)")


class RootApplicationDetailsCurrencyFuturesCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="Currency Futures", title="")
    currency_futures_minimum_paisa: Optional[int] = Field(None, title="Minimum Paisa")
    currency_futures_in_percentage: Optional[float] = Field(None, title="In %")


class RootApplicationDetailsCurrencyOptionsCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="Currency Options", title="")
    currency_options_rate: Optional[int] = Field(None, title="Rate (Rs)")


class RootApplicationDetailsFlatPerOrderCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="Flat Per Order", title="")
    flat_per_order_rate: Optional[int] = Field(None, title="Rate (Rs)")


class RootApplicationDetailsFuturesCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="Futures", title="")
    futures_minimum_paisa: Optional[int] = Field(None, title="Minimum Paisa")
    futures_in_percentage: Optional[float] = Field(None, title="In %")


class RootApplicationDetailsGeneralApplicationDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    application_type: APPLICATIONTYPE = Field(
        ..., description="Select Option", title="Type of Application"
    )
    residential_status: RESIDENCESTATUSRIONLY = Field(
        ..., description="Select Option", title="Residential Status of Client"
    )


class RootApplicationDetailsGstDetailsCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    gst_number: Optional[constr(pattern=r"\d{2}[A-Z]{5}\d{4}[A-Z]{1}\d{1}[0-Z]{2}")] = (
        Field(None, title="GST No.")
    )
    gst_state: Optional[INDIASTATES] = Field(None, title="GST State")


class RootApplicationDetailsOnlineExeCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    online_exe: Optional[OPTION] = Field("NO", title="Online EXE (Fee.Rs.750/-)")


class RootApplicationDetailsOptionsCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="Options", title="")
    options_standard_rate: Optional[int] = Field(None, title="Standard Rate (Rs)")


class RootApplicationDetailsSegmentRates(BaseModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class RootApplicationDetailsSlbCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(None, description="SLB", title="")
    slb_rate: Optional[int] = Field(None, title="Rate (Rs)")


class RootBankVerificationBankDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    bank_account_number: str = Field(
        ..., description="Enter Bank Account Number", title="Bank Account Number"
    )
    ifsc_code: constr(pattern=r"[A-Z]{4}\d{7}") = Field(
        ..., description="Enter IFSC Code", title="IFSC Code"
    )
    micr_code: Optional[constr(pattern=r"\d{9}")] = Field(
        None, description="MICR code as on cheque leaf", title="MICR Code"
    )
    bank_name: Optional[str] = Field(
        None, description="Name of the Bank", title="Bank Name"
    )
    account_type: BANKACCOUNTTYPE = Field(
        ..., description="Bank Account Type", title="Account Type"
    )
    account_holder_name_pan: str = Field(
        ..., description="Name as per PAN", title="Name as per PAN"
    )
    account_holder_name_id: str = Field(
        ..., description="Name as per ID Proof", title="Name as in ID Proof"
    )
    account_holder_name: Optional[str] = Field(
        None, description="Name as per bank record", title="Account Holder's Name"
    )
    account_mobile_number: str = Field(..., title="Mobile Number")
    bank_address: Optional[str] = Field(
        None, description="Bank Address", title="Bank Address"
    )
    type_of_application: Optional[str] = Field("$..application_type", title="")


class RootBankVerificationCancelledCheque(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None, description="Upload a picture of the cancelled cheque.", title=""
    )
    cancelled_cheque_image: Union[str, Dict[str, Any]] = Field(
        ...,
        description="Upload your cancelled cheque image",
        title="Cancelled Cheque Image",
    )


class RootDpInformationDpAccountInformation(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    dp_tariff_plan: Optional[DPTARIFFPLAN] = Field(
        None, description="DP Tariff Plan", title="DP Tariff Plan"
    )
    name_of_dp: Optional[str] = Field(None, title="Name of DP")
    depository: Optional[DEPOSITORY] = Field(None, title="Depository")
    dp_id_no: Optional[str] = Field(None, title="DP ID No")
    client_id_no: Optional[str] = Field(None, title="Client ID No")
    cmr_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description="Upload your CMR file", title="Upload CMR File"
    )


class RootDpInformationStandingInfoFromClient(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    receive_credit_auth_status: Optional[OPTION] = Field(
        None,
        title="I/We authorize you to receive credits automatically into my / our account",
    )
    first_holder_sms_alert: Optional[SMSALERTOPTION] = Field(
        None, title="SMS Alert Facility"
    )
    account_statement_requirement: Optional[FREQUENCY] = Field(
        None, title="Account Statement Requirement"
    )
    electronic_transaction_holding_statement: Optional[OPTION] = Field(
        None,
        title="I/We request you to send Electronic Transaction-Cum-Holding Statements at Sole/ First Holder's Email as stated in the account opening form",
    )
    dividend_interest_receive_option: Optional[OPTION] = Field(
        None,
        title="Do you wish to receive Dividends/Interest directly into your bank account mentioned in KYC",
    )
    auto_pledge_confirmation: Optional[OPTION] = Field(
        None, title="Standing Instruction for Auto Pledge Confirmation by Pledge"
    )
    did_booklet_issuance: Optional[DISDELIVERY] = Field(
        None, title="Option for Issuance of Delivery Instruction Slip (DIS) Booklet"
    )
    bsda: Optional[OPTION] = Field(None, title="Basic Services Demat Account (BSDA)")
    joint_account_operation_mode: Optional[JOINTACCOUNTOPERATIONMODE] = Field(
        None, title="Mode of operation for joint accounts"
    )
    consent_for_communication: Optional[CONSENTFORCOMMUNICATION] = Field(
        None, title="Consent for Communication to be received by:"
    )
    share_email_id_with_rta: Optional[OPTION] = Field(
        None, title="I/We Would like to share the email ID with the RTA"
    )
    receive_annual_report: Optional[DELIVERYMODE] = Field(
        None,
        title="I/We Would like to receive the annual report (If Not selected it will be physical)",
    )
    aadhaar_pan_seed_status: Optional[PANAADHAARSEED] = Field(
        None, title="PAN is seeded with Aadhaar"
    )
    trust: Optional[OPTION] = Field(
        None, title="Transactions Using Secured Texting Facility (TRUST)"
    )


class RootDpInformationTrustInformation(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    stack_exchange_name: Optional[str] = Field(
        None, description="Enter Value", title="Stack Exchange Name/ID"
    )
    clearing_member_name: Optional[str] = Field(
        None, description="Enter Value", title="Clearing Member Name"
    )
    clearing_member_id: Optional[str] = Field(
        None, description="Enter Value", title="Clearing Member ID"
    )


class RootDpInformationUccMapping1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ucc_code_1: Optional[str] = Field(None, description="Enter Value", title="UCC Code")
    exchange_id_1: Optional[str] = Field(
        None, description="Enter Value", title="Exchange ID"
    )
    segment_id_1: Optional[str] = Field(
        None, description="Enter Value", title="Segment ID"
    )
    cm_id_1: Optional[str] = Field(None, description="Enter Value", title="CM ID")
    tm_id_1: Optional[str] = Field(None, description="Enter Value", title="TM ID")


class RootDpInformationUccMapping2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ucc_code_2: Optional[str] = Field(None, description="Enter Value", title="UCC Code")
    exchange_id_2: Optional[str] = Field(
        None, description="Enter Value", title="Exchange ID"
    )
    segment_id_2: Optional[str] = Field(
        None, description="Enter Value", title="Segment ID"
    )
    cm_id_2: Optional[str] = Field(None, description="Enter Value", title="CM ID")
    tm_id_2: Optional[str] = Field(None, description="Enter Value", title="TM ID")


class RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    is_client_tax_resident: Optional[OPTION] = Field(
        "NO", title="Is the holder a tax resident of any country other than India?"
    )


class RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    country_of_residency_1: Optional[COUNTRY3CODE] = Field(
        None, description="Country of Residency", title="Country of Residency"
    )
    tin_no_1: Optional[str] = Field(None, description="Enter TIN No", title="TIN No")
    id_type_1: Optional[str] = Field(None, description="Enter ID Type", title="ID Type")
    reason_if_no_tin_1: Optional[NOTINREASON] = Field(
        None,
        description="Reasons (if TIN not available)",
        title="Reasons (if TIN not available)",
    )


class RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration2(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    country_of_residency_2: Optional[COUNTRY] = Field(
        None, description="Country of Residency", title="Country of Residency"
    )
    tin_no_2: Optional[str] = Field(None, description="Enter TIN No", title="TIN No")
    id_type_2: Optional[str] = Field(None, description="Enter ID Type", title="ID Type")
    reason_if_no_tin_2: Optional[NOTINREASON] = Field(
        None,
        description="Reasons (if TIN not available)",
        title="Reasons (if TIN not available)",
    )


class RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration3(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    country_of_residency_3: Optional[COUNTRY3CODE] = Field(
        None, description="Country of Residency", title="Country of Residency"
    )
    tin_no_3: Optional[str] = Field(None, description="Enter TIN No", title="TIN No")
    id_type_3: Optional[str] = Field(None, description="Enter ID Type", title="ID Type")
    reason_if_no_tin_3: Optional[NOTINREASON] = Field(
        None,
        description="Reasons (if TIN not available)",
        title="Reasons (if TIN not available)",
    )


class RootKycHoldersKycHolderDeclarationsIncomeInfo(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    gross_annual_income: Optional[INCOME] = Field(
        None, description="Gross Annual Income", title="Gross Annual Income"
    )
    networth: Optional[int] = Field(
        None, description="Enter Networth as on date ", title="Networth as on date"
    )
    occupation: Optional[OCCUPATION] = Field(
        None, description="Select Option", title="Occupation"
    )
    # date: Optional[date] = Field(None, description='Enter Date', title='Date')


class RootKycHoldersKycHolderDeclarationsPoliticallyExposedPersonCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    politically_exposed_person: Optional[POLITICALEXPO] = Field(
        None, title="Please choose one of the following:"
    )


class RootKycHoldersKycHolderIdentityAddressVerificationCorrespondenceAddress(
    BaseModel
):
    model_config = ConfigDict(
        extra="allow",
    )
    proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description="Upload Address Proof", title="Correspondence Address Proof"
    )
    type_of_address: ADDRESSTYPE = Field(
        ..., description="Select Option", title="Type of Address"
    )
    full_address: str = Field(
        ..., description="House #, Street, Locality", title="Correspondence Address"
    )
    city: str = Field(..., description="City", title="City")
    state: str = Field(..., description="State", title="State")
    pin: str = Field(..., description="PIN", title="PIN")
    country: str = Field(..., description="Country", title="Country")


class RootKycHoldersKycHolderIdentityAddressVerificationIdentityAddressInfo(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    aadhaar_xml: Optional[str] = Field(
        "@.digi_locker_aadhaar.TRUSTED_DIGILOCKER.aadhaar_xml", title=""
    )
    name: str = Field(
        ..., description="Name as in Aadhaar/ID Card", title="Name as in ID Proof"
    )
    uid: str = Field(..., description="ID Number", title="ID Number")
    id_proof_expiry: Optional[date] = Field(
        None, description="Expiry date for ID Proof", title="ID Proof Expiry Date"
    )
    gender: GENDER = Field(..., description="Gender", title="Gender")
    type_of_address: ADDRESSTYPE = Field(
        ..., description="Select Option", title="Type of Address"
    )
    full_address: str = Field(
        ..., description="House #, Street, Locality", title="Permanent Address"
    )
    city: str = Field(..., description="City", title="City")
    state: str = Field(..., description="State", title="State")
    pin: str = Field(..., description="PIN", title="PIN")
    country: str = Field(..., description="Country", title="Country")


class RootKycHoldersKycHolderIdentityAddressVerificationOtherInfo(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    father_name: Optional[str] = Field(
        None, description="Enter Father's Name", title="Father's Name"
    )
    mother_name: Optional[str] = Field(
        None, description="Enter Mother's Name", title="Mother's Name"
    )
    marital_status: Optional[W2WMARITALSTATUS] = Field(None, title="Marital Status")
    place_of_birth: Optional[str] = Field(
        None, description="Enter Place of Birth", title="Place of Birth"
    )
    country_of_birth: Optional[COUNTRYINDONLY] = Field(
        None, description="Enter Country of Birth", title="Country of Birth"
    )
    residential_status: RESIDENCESTATUSRIONLY = Field(
        ..., description="Select Option", title="Residential Status of Client"
    )


class RootKycHoldersKycHolderIdentityAddressVerificationOvd(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ovd_type: Optional[OVDTYPE] = Field(
        None, description="Select Option", title="Select OVD"
    )
    ovd_front: Optional[Union[str, Dict[str, Any]]] = Field(
        None, title="Upload front side"
    )
    ovd_back: Optional[Union[str, Dict[str, Any]]] = Field(
        None, title="Upload back side"
    )


class RootKycHoldersKycHolderLivenessCheckLivenessGeoLoc(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    lat: Optional[str] = Field(None, title="")
    long: Optional[str] = Field(None, title="")


class RootKycHoldersKycHolderLivenessCheckVideoCapture(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    liveness_video: Optional[Union[str, Dict[str, Any]]] = Field(None, title="")


class RootKycHoldersKycHolderLivenessPhotoCapturePhotoCapture(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    liveness_photo: Optional[Union[str, Dict[str, Any]]] = Field(None, title="")


class RootKycHoldersKycHolderMobileEmailVerificationEmailVerification(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    dependency_relationship_email: RELATIONSHIP = Field(
        ..., description="Select Option", title="Dependency Relationship"
    )
    contact_id: EmailStr = Field(..., title="Email ID")
    otp: str = Field(..., title="OTP")
    transaction_id: str = Field(..., title="Transaction ID")


class RootKycHoldersKycHolderMobileEmailVerificationMobileVerification(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    dependency_relationship_mobile: RELATIONSHIP = Field(
        ..., description="Select Option", title="Dependency Relationship"
    )
    contact_id: str = Field(..., title="Mobile Number")
    otp: str = Field(..., title="OTP")
    transaction_id: str = Field(..., title="Transaction ID")


class RootKycHoldersKycHolderPanVerificationPanDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    name_in_pan: Optional[str] = Field(
        "@.pan_card_image.TRUSTED_PAN_OCR.full_name",
        description="Enter Name",
        title="Name as in PAN",
    )
    dob_pan: Optional[str] = Field(
        "@.pan_card_image.TRUSTED_PAN_OCR.dob",
        description="dd/mm/yyyy",
        title="Date of Birth",
    )
    pan_number: Optional[str] = Field(
        "@.pan_card_image.TRUSTED_PAN_OCR.pan_number",
        description="Enter PAN Number",
        title="PAN Number",
    )
    parent_guardian_spouse_name: Optional[str] = Field(
        "@.pan_card_image.TRUSTED_PAN_OCR.father_name",
        description="Enter Parent/Guardian/Spouse Name",
        title="Parent/Guardian/Spouse Name",
    )


class RootKycHoldersKycHolderSignatureValidationUploadImages(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    wet_signature_image: Union[str, Dict[str, Any]] = Field(
        ..., description="Upload an image", title="Image of Wet Signature"
    )
    proof_of_signature: Union[str, Dict[str, Any]] = Field(
        ..., description="Upload an image", title="Proof of Signature"
    )


class RootKycHoldersKycHolderUploadPdfAttachmentsKycHolderAttachment(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    upload_pdf: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description="Upload an PDF", title="Upload PDF"
    )
    display_field: Optional[str] = Field(
        None,
        description='<div style="text-align: center; margin: 10px">\n        <h1 style="margin-bottom: 20px;">Instructions for Non-DigiLocker Process</h1>\n        <p style="margin-bottom: 10px;">Since you have chosen the non-DigiLocker process, please complete all sections in the KYC Holder Group. Then, navigate to the operations section and initiate the "Download PDF" operation to obtain the document.</p>\n        <p>Print the PDF, attach all required images, and scan the entire document. Finally, upload the scanned document as a PDF.</p>\n    </div>',
        title="",
    )


class RootNominationDetailsGeneral(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    client_nominee_appointment_status: OPTION = Field(
        ..., title="Does the Client want to appoint Nominees?"
    )


class RootNominationDetailsNomineesNomineeGuardianData(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    guardian_id_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, title="Guardian ID Proof"
    )
    guardian_type_of_id: Optional[IDTYPE] = Field(None, title="Type of ID")
    guardian_name: Optional[str] = Field(None, title="Name of Guardian")
    guardian_address: Optional[str] = Field(None, title="Guardian Address")
    guardian_signature: Optional[Union[str, Dict[str, Any]]] = Field(
        None, title="Guardian Signature"
    )
    guardian_id_number: Optional[str] = Field(None, title="ID Number")
    relationship_with_nominee: Optional[str] = Field(
        None, title="Relationship with Nominee"
    )


class RootNominationDetailsNomineesNomineeNomineeData(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    minor_nominee: Optional[MINORNOMINEE] = Field(None, title="")
    nominee_type_of_id: Optional[IDTYPE] = Field(
        None, description="Type Of ID", title="Type Of ID"
    )
    name_of_nominee: Optional[str] = Field(
        None, description="Enter Name of Nominee", title="Name of Nominee"
    )
    percentage_of_allocation: Optional[float] = Field(
        None,
        description="Enter Percentage of Allocation",
        title="Percentage of Allocation",
    )
    nominee_id_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description="Upload an image", title="Nominee ID Proof"
    )
    id_number: Optional[str] = Field(
        None, description="Enter ID Number", title="ID Number"
    )
    dob_nominee: Optional[str] = Field(
        None, description="DD/MM/YYYY", title="Date of Birth"
    )
    nominee_address: Optional[str] = Field(
        None, description="Enter Address", title="Nominee Address"
    )


class RootOnboarding(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None, description="Select the type of client to onboard:", title=""
    )
    type_of_client: CLIENTTYPEINDONLY = Field(
        ..., description="Select Option", title="Type of Client"
    )
    df_individual: Optional[str] = Field(
        None,
        description='<div class="container">\n    <h2>Instructions to Onboard an Individual Client :</h2>\n    <p>Following is the list of documents the Client needs to have during the process:</p>\n    <ul>\n        <li>PAN Card</li>\n        <li>Aadhaar Card for ID Proof and Address Proof</li>\n        <li>Bank Account Information</li>\n        <li>Nominee Information</li>\n    </ul>\n    <p class="note">Please note that every holder is required to submit their PAN and Aadhaar Information.</p>\n</div>',
        title="",
    )
    df_corporate: Optional[str] = Field(None, description="Corporate Details", title="")
    df_huf: Optional[str] = Field(None, description="HUF details", title="")
    df_partnership: Optional[str] = Field(
        None, description="Partnership details", title=""
    )
    df_trust: Optional[str] = Field(None, description="Trust Details", title="")
    df_society: Optional[str] = Field(None, description="Society Details", title="")
    df_banks: Optional[str] = Field(None, description="Bank details", title="")
    df_unincorporp: Optional[str] = Field(
        None, description="Unincorporated Text", title=""
    )


class RootOperationsOperationCard(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    operation_type: Optional[str] = Field(
        None, description="Select Option", title="Select Operation"
    )


class RootTncDeclaration(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    sms_alert: SMSALERT = Field(..., title="")
    policy: POLICY = Field(..., title="")
    processing_time: PROCESSINGTIME = Field(..., title="")


class RootTradingInformationCheckPanForTradingAccount(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    trading_id: Optional[str] = Field(
        None, description="Enter Trading ID", title="Trading ID"
    )
    account_holder_name: Optional[str] = Field(
        None, description="Enter Name of Account Holder", title="Name of Account Holder"
    )
    account_creation_date: Optional[date] = Field(
        None, description="Enter Account Creation Date", title="Account created on"
    )


class RootTradingInformationDetailsOfDealings(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    broker_name: Optional[str] = Field(None, title="Name of Broker")
    telephone: Optional[str] = Field(None, title="Telephone")
    client_codes: Optional[str] = Field(None, title="Client Codes")
    broker_address: Optional[str] = Field(None, title="Broker Address")
    sub_broker_name: Optional[str] = Field(None, title="Name of Sub-Broker")
    website: Optional[str] = Field(None, title="Website")
    detail_of_disputes: Optional[str] = Field(
        None,
        title="Details of disputes / dues pending from / to such stock broker / sub-broker",
    )


class RootTradingInformationEmployerDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    employer_name: Optional[str] = Field(None, title="Name of the Employer")
    mobile_number: Optional[str] = Field(None, title="Mobile Number")
    approval_date: Optional[date] = Field(None, title="Date of Approval")
    employer_address: Optional[str] = Field(None, title="Employer Address")


class RootTradingInformationIntroducerDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    introducer_name: Optional[str] = Field(None, title="Name Of Introducer")
    introducer_broker_address: Optional[str] = Field(None, title="Introducer Address")
    introducer_status: Optional[INTRODUCERSTATUS] = Field(
        None, description="Status of Introducer", title="Status of Introducer"
    )
    remisire_code: Optional[str] = Field(None, title="Introducer Code")


class RootTradingInformationTradingAccountInformation(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None,
        description="Send the Client the account opening kit/ standard set of documents in:",
        title="Send the Client the account opening kit/ standard set of documents in:",
    )
    segment_pref_1: Optional[SEGMENTPREF1] = Field("EQUITY", title="")
    segment_pref_2: Optional[SEGMENTPREF2] = Field(None, title="")
    segment_pref_3: Optional[SEGMENTPREF3] = Field(None, title="")
    segment_pref_4: Optional[SEGMENTPREF4] = Field(None, title="")
    segment_pref_5: Optional[SEGMENTPREF5] = Field(None, title="")
    segment_pref_6: Optional[SEGMENTPREF6] = Field("SLB", title="")
    choice_of_contract: Optional[str] = Field(
        None,
        description="Do you wish to receive the Contract as: ",
        title="Do you wish to receive the Contract as: ",
    )
    contract_format_1: Optional[CONTRACTFORMAT1] = Field(None, title="")
    contract_format_2: Optional[CONTRACTFORMAT2] = Field(None, title="")
    proof_of_income: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description="Upload the document", title="Upload proof of income"
    )
    type_of_document: Optional[IDTYPE] = Field(None, title="Type of Document")
    client_facility_choice: Optional[OPTION] = Field(
        "YES",
        title="Does the Client want facility of Internet/wireless trading/mobile trading/technology?",
    )
    kit_format_1: Optional[KITFORMAT1] = Field(None, title="")
    kit_format_2: Optional[KITFORMAT2] = Field("ELECTRONIC", title="")
    holder_trading_experience: Optional[TRADINGEXP] = Field(
        None, title="Trading Experience of Holder"
    )


class RootApplicationDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    defaults: Optional[APPDETDEFAULTS] = Field(None, title="Defaults")
    kyc_digilocker: OPTION = Field(
        ..., title="Would the client like to complete KYC using Digilocker?"
    )
    general_application_details: Optional[
        RootApplicationDetailsGeneralApplicationDetails
    ] = Field(None, title="General")
    display_field: Optional[str] = Field(None, description="TARIFF SHEET", title="")
    segment_rates: Optional[RootApplicationDetailsSegmentRates] = Field(None, title="")
    cash_fut_como_card: Optional[RootApplicationDetailsCashFutComoCard] = Field(
        None, title=""
    )
    cash_jobbing_card: Optional[RootApplicationDetailsCashJobbingCard] = Field(
        None, title=""
    )
    futures_card: Optional[RootApplicationDetailsFuturesCard] = Field(None, title="")
    options_card: Optional[RootApplicationDetailsOptionsCard] = Field(None, title="")
    currency_futures_card: Optional[RootApplicationDetailsCurrencyFuturesCard] = Field(
        None, title=""
    )
    currency_options_card: Optional[RootApplicationDetailsCurrencyOptionsCard] = Field(
        None, title=""
    )
    commodity_futures_card: Optional[RootApplicationDetailsCommodityFuturesCard] = (
        Field(None, title="")
    )
    commodity_options_card: Optional[RootApplicationDetailsCommodityOptionsCard] = (
        Field(None, title="")
    )
    slb_card: Optional[RootApplicationDetailsSlbCard] = Field(None, title="")
    flat_per_order_card: Optional[RootApplicationDetailsFlatPerOrderCard] = Field(
        None, title=""
    )
    online_exe_card: Optional[RootApplicationDetailsOnlineExeCard] = Field(
        None, title=""
    )
    gst_details_card: Optional[RootApplicationDetailsGstDetailsCard] = Field(
        None, title="GST Details"
    )
    client_contact_details: Optional[RootApplicationDetailsClientContactDetails] = (
        Field(None, title="Client Contact Details")
    )


class RootBankVerification(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    cancelled_cheque: Optional[RootBankVerificationCancelledCheque] = Field(
        None, title="Cancelled Cheque"
    )
    bank_details: Optional[RootBankVerificationBankDetails] = Field(
        None, title="Bank Details"
    )


class RootDpInformation(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    dp_Account_information: Optional[RootDpInformationDpAccountInformation] = Field(
        None, title="DP Account Information"
    )
    standing_info_from_client: Optional[RootDpInformationStandingInfoFromClient] = (
        Field(None, title="Standing Instructions from Client")
    )
    display_field: Optional[str] = Field(None, title="UCC Mapping for DP account")
    trust_information: Optional[RootDpInformationTrustInformation] = Field(
        None, title="TRUST Information"
    )
    ucc_mapping_1: Optional[RootDpInformationUccMapping1] = Field(None, title="")
    ucc_mapping_2: Optional[RootDpInformationUccMapping2] = Field(None, title="")


class RootKycHoldersKycHolderDeclarations(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    income_info: Optional[RootKycHoldersKycHolderDeclarationsIncomeInfo] = Field(
        None, title="Income Information"
    )
    fatca_crs_declaration: Optional[
        RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration
    ] = Field(None, title="FATCA CRS Declaration")
    display_field: Optional[str] = Field(None, title="FATCA - CRS Declaration")
    fatca_crs_declaration_1: Optional[
        RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration1
    ] = Field(None, title="")
    fatca_crs_declaration_2: Optional[
        RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration2
    ] = Field(None, title="")
    fatca_crs_declaration_3: Optional[
        RootKycHoldersKycHolderDeclarationsFatcaCrsDeclaration3
    ] = Field(None, title="")
    politically_exposed_person_card: Optional[
        RootKycHoldersKycHolderDeclarationsPoliticallyExposedPersonCard
    ] = Field(None, title="Politically Exposed Person")


class RootKycHoldersKycHolderIdentityAddressVerification(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    digi_locker_aadhaar: Optional[str] = Field(None, title="")
    ovd: Optional[RootKycHoldersKycHolderIdentityAddressVerificationOvd] = Field(
        None, title="Upload OVD"
    )
    identity_address_info: Optional[
        RootKycHoldersKycHolderIdentityAddressVerificationIdentityAddressInfo
    ] = Field(None, title="Identity and Permanent Address Information")
    other_info: Optional[
        RootKycHoldersKycHolderIdentityAddressVerificationOtherInfo
    ] = Field(None, title="Other Information")
    same_as_permanent_address: Optional[SAMEASPERM] = Field(None, title="")
    correspondence_address: Optional[
        RootKycHoldersKycHolderIdentityAddressVerificationCorrespondenceAddress
    ] = Field(None, title="Correspondence Address")


class RootKycHoldersKycHolderLivenessCheck(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    video_capture: Optional[RootKycHoldersKycHolderLivenessCheckVideoCapture] = Field(
        None, title="Video Capture"
    )
    liveness_captcha: Optional[List] = Field(None, title="")
    liveness_geo_loc: Optional[RootKycHoldersKycHolderLivenessCheckLivenessGeoLoc] = (
        Field(None, title="")
    )


class RootKycHoldersKycHolderLivenessPhotoCapture(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    photo_capture: Optional[RootKycHoldersKycHolderLivenessPhotoCapturePhotoCapture] = (
        Field(None, title="Photo Capture")
    )


class RootKycHoldersKycHolderMobileEmailVerification(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    mobile_verification: Optional[
        RootKycHoldersKycHolderMobileEmailVerificationMobileVerification
    ] = Field(None, title="Mobile Verification")
    email_verification: Optional[
        RootKycHoldersKycHolderMobileEmailVerificationEmailVerification
    ] = Field(None, title="Email Verification")


class RootKycHoldersKycHolderPanVerification(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None,
        description="Upload the front image of the PAN card showing the PAN number, Name and other details to autofill the fields.",
        title="",
    )
    pan_card_image: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description="Upload front image of PAN card", title="PAN Card Image"
    )
    pan_details: Optional[RootKycHoldersKycHolderPanVerificationPanDetails] = Field(
        None, title="PAN Details"
    )


class RootKycHoldersKycHolderSignatureValidation(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None,
        description="Upload a clear image of Client's wet signature and an image from PAN, Driver License, Passport or Bank Attestation as Proof of Signature.",
        title="",
    )
    upload_images: Optional[RootKycHoldersKycHolderSignatureValidationUploadImages] = (
        Field(None, title="Upload Images")
    )


class RootKycHoldersKycHolderUploadPdfAttachments(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    kyc_holder_attachment: Optional[
        RootKycHoldersKycHolderUploadPdfAttachmentsKycHolderAttachment
    ] = Field(None, title="KYC Holder Attachment")


class RootNominationDetailsNomineesNominee(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    nominee_data: Optional[RootNominationDetailsNomineesNomineeNomineeData] = Field(
        None, title="Nominee"
    )
    guardian_data: Optional[RootNominationDetailsNomineesNomineeGuardianData] = Field(
        None, title="Guardian of Nominee"
    )


class RootOperations(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    operation_card: Optional[RootOperationsOperationCard] = Field(
        None, title="Operations"
    )


class RootTnc(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    display_field: Optional[str] = Field(
        None,
        description="I/We have understood the information requirements of this form (read along with the FATCA & CRS instructions) and hereby confirm that the information provided by me/us on this form is true, correct and complete. I/We also confirm that I/We have read and understood the FACTA & CRS terms and conditions and hereby accept the same.",
        title="",
    )
    declaration: Optional[RootTncDeclaration] = Field(None, title="Declaration - 1")


class RootTradingInformation(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    check_pan_for_trading_account: Optional[
        RootTradingInformationCheckPanForTradingAccount
    ] = Field(None, title="Check PAN for Trading Account")
    trading_account_information: Optional[
        RootTradingInformationTradingAccountInformation
    ] = Field(None, title="Trading Account Information")
    employer_details: Optional[RootTradingInformationEmployerDetails] = Field(
        None, title="Employer Details"
    )
    details_of_dealings: Optional[RootTradingInformationDetailsOfDealings] = Field(
        None, title="Details of Dealing through Sub-brokers and other Stock Brokers"
    )
    introducer_details: Optional[RootTradingInformationIntroducerDetails] = Field(
        None, title="Introducer Details"
    )


class FieldGrpRootNominationDetailsNominees(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    nominee: Optional[RootNominationDetailsNomineesNominee] = Field(None, title="")


class RootKycHoldersKycHolder(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    mobile_email_verification: Optional[
        RootKycHoldersKycHolderMobileEmailVerification
    ] = Field(None, title="Mobile & Email Verification")
    pan_verification: Optional[RootKycHoldersKycHolderPanVerification] = Field(
        None, title="PAN Verification"
    )
    identity_address_verification: Optional[
        RootKycHoldersKycHolderIdentityAddressVerification
    ] = Field(None, title="Identity and Address Verification")
    signature_validation: Optional[RootKycHoldersKycHolderSignatureValidation] = Field(
        None, title="Signature Validation"
    )
    liveness_photo_capture: Optional[RootKycHoldersKycHolderLivenessPhotoCapture] = (
        Field(None, title="Liveness Check")
    )
    liveness_check: Optional[RootKycHoldersKycHolderLivenessCheck] = Field(
        None, title="Liveness Check"
    )
    declarations: Optional[RootKycHoldersKycHolderDeclarations] = Field(
        None, title="Declarations"
    )
    upload_pdf_attachments: Optional[RootKycHoldersKycHolderUploadPdfAttachments] = (
        Field(None, title="Upload PDF Attachments")
    )


class RootNominationDetails(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    general: Optional[RootNominationDetailsGeneral] = Field(None, title="General")
    nominees: Optional[List[FieldGrpRootNominationDetailsNominees]] = Field(
        None, title=""
    )


class FieldGrpRootKycHolders(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    kyc_holder: Optional[RootKycHoldersKycHolder] = Field(None, title="KYC Holder")


class Form(BaseModel):

    onboarding: Optional[RootOnboarding] = Field(None, title="Onboarding Requirements")
    application_details: Optional[RootApplicationDetails] = Field(
        None, title="Application Details"
    )
    kyc_holders: Optional[List[FieldGrpRootKycHolders]] = Field(
        None, title="KYC Holders"
    )
    bank_verification: Optional[RootBankVerification] = Field(
        None, title="Bank Verification"
    )
    nomination_details: Optional[RootNominationDetails] = Field(
        None, title="Nomination Details"
    )
    trading_information: Optional[RootTradingInformation] = Field(
        None, title="Trading Information"
    )
    dp_information: Optional[RootDpInformation] = Field(None, title="DP Information")
    tnc: Optional[RootTnc] = Field(None, title="Terms and Conditions")
    operations: Optional[RootOperations] = Field(None, title="Operations")

    model_config = ConfigDict(
        extra="allow",
    )


def translate_form_to_techxl(value: Dict[str, Any]) -> Dict[str, Any]:
    form = Form.model_validate(value)

    return {
        **_translate_onboarding(form.onboarding),
        **_translate_application_details(form.application_details),
        **_translate_kyc_holders(form.kyc_holders),
        **_translate_bank_verification(form.bank_verification),
        **_translate_nomination_details(form.nomination_details),
        **_translate_trading_information(form.trading_information),
        **_translate_dp_information(form.dp_information),
        **_translate_tnc(form.tnc),
    }


def _translate_onboarding(value: RootOnboarding) -> Dict[str, Any]:
    return {
        "CATEGORY": value.type_of_client.value,
    }


def _translate_application_details(value: RootApplicationDetails) -> Dict[str, Any]:
    return {}


def _translate_kyc_holders(value: List[FieldGrpRootKycHolders]) -> Dict[str, Any]:
    # todo: based on MARITAL_STATUS and GENDER, set TITLE
    def _title(value: W2WMARITALSTATUS) -> str:
        if value == W2WMARITALSTATUS.MARRIED:
            return "MR"
        elif value == W2WMARITALSTATUS.UNMARRIED:
            return "MISS"
        elif value == W2WMARITALSTATUS.DIVORCED:
            return "MRS"
        else:
            return ""

    if not value:
        return {}

    result = {}
    for i, holder in enumerate(value, 1):
        pan = holder.kyc_holder.pan_verification.pan_details
        if i == 1:
            result["PAN_NO"] = pan.pan_number
        #     todo: prefix / suffix
        result.update(
            {
                "PAN_NAME": pan.name,
                "FATHER_HUSBAND_NAME": pan.parent_guardian_spouse_name,
                "BIRTH_DATE": pan.dob_pan,
                # "TITLE":
                "MARITAL_STATUS": holder.kyc_holder.identity_address_verification.other_info.marital_status.value,
                "PIN_CODE": holder.kyc_holder.identity_address_verification.identity_address_info.pin,
                "CITY": holder.kyc_holder.identity_address_verification.identity_address_info.city,
                "STATE": holder.kyc_holder.identity_address_verification.identity_address_info.state,
                "COUNTRY": holder.kyc_holder.identity_address_verification.identity_address_info.country,
                "MOBILE_NO": holder.kyc_holder.mobile_verification.mobile_verification.contact_id,
                "EMAIL_ID": holder.kyc_holder.mobile_email_verification.email_verification.contact_id,
            }
        )

    return result


def _translate_bank_verification(value: RootBankVerification) -> Dict[str, Any]:
    return {}


def _translate_nomination_details(value: RootNominationDetails) -> Dict[str, Any]:
    return {}


def _translate_trading_information(value: RootTradingInformation) -> Dict[str, Any]:
    return {"EXCHANGELIST": ""}


def _translate_dp_information(value: RootDpInformation) -> Dict[str, Any]:
    return {}


def _translate_tnc(value: RootTnc) -> Dict[str, Any]:
    return {}
