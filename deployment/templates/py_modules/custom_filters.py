# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-03-31T11:37:23+00:00

from __future__ import annotations

from typing import Any, Dict, List

from model import (
    Form,
    RootOnboarding,
    RootApplicationDetails,
    FieldGrpRootKycHolders,
    W2WMARITALSTATUS,
    RootBankVerification,
    RootNominationDetails,
    RootTradingInformation,
    RootDpInformation,
    RootTnc,
    GENDER,
)


def translate_form_to_techxl(value: Dict[str, Any]) -> Dict[str, Any]:
    form = Form.model_validate(value)

    return {
        **_translate_onboarding(form.onboarding),
        **_translate_application_details(form.application_details),
        **_translate_kyc_holders(form.kyc_holders),
        **_translate_bank_verification(form.bank_verification),
        **_translate_nomination_details(form.nomination_details),
        **_translate_trading_information(form.trading_information),
        **_translate_dp_information(form.dp_information),
        **_translate_tnc(form.tnc),
    }


def _translate_onboarding(value: RootOnboarding) -> Dict[str, Any]:
    return {
        "CATEGORY": value.type_of_client.value,
    }


def _translate_application_details(value: RootApplicationDetails) -> Dict[str, Any]:
    return {}


def _translate_kyc_holders(value: List[FieldGrpRootKycHolders]) -> Dict[str, Any]:

    def _title(marital_status: W2WMARITALSTATUS, gender: GENDER) -> str:
        if gender == GENDER.M:
            return "MR"
        elif gender == GENDER.F:
            return "MRS" if marital_status == W2WMARITALSTATUS.MARRIED else "MISS"
        else:
            return "MR"  # Default for other genders

    def _first_name(name: str) -> str:
        # Assuming the first name is the first part of the name
        return name.split()[0] if name else ""

    def _last_name(name: str) -> str:
        # Assuming the last name is the last part of the name
        return name.split()[-1] if name else ""

    def _middle_name(name: str) -> str:
        # Assuming the middle name is everything between the first and last name
        parts = name.split()
        return " ".join(parts[1:-1]) if len(parts) > 2 else ""

    if not value:
        return {}

    result = {}
    for i, holder in enumerate(value, 1):
        pan = holder.kyc_holder.pan_verification.pan_details
        if i == 1:
            result["PAN_NO"] = pan.pan_number
        #     todo: prefix / suffix
        result.update(
            {
                "PAN_NAME": pan.name_in_pan,
                "FIRST_NAME": _first_name(pan.name_in_pan),
                "MIDDLE_NAME": _middle_name(pan.name_in_pan),
                "LAST_NAME": _last_name(pan.name_in_pan),
                "FATHER_HUSBAND_NAME": pan.parent_guardian_spouse_name,
                "BIRTH_DATE": pan.dob_pan,
                "TITLE": _title(
                    holder.kyc_holder.identity_address_verification.other_info.marital_status,
                    holder.kyc_holder.identity_address_verification.identity_address_info.gender,
                ),
                "MARITAL_STATUS": holder.kyc_holder.identity_address_verification.other_info.marital_status.value,
                "SEX": holder.kyc_holder.identity_address_verification.identity_address_info.gender.value,
                "PIN_CODE": holder.kyc_holder.identity_address_verification.identity_address_info.pin,
                "CITY": holder.kyc_holder.identity_address_verification.identity_address_info.city,
                "STATE": holder.kyc_holder.identity_address_verification.identity_address_info.state,
                "COUNTRY": holder.kyc_holder.identity_address_verification.identity_address_info.country,
                "MOBILE_NO": holder.kyc_holder.mobile_email_verification.mobile_verification.contact_id,
                "EMAIL_ID": holder.kyc_holder.mobile_email_verification.email_verification.contact_id,
            }
        )

    return result


def _translate_bank_verification(value: RootBankVerification) -> Dict[str, Any]:
    return {}


def _translate_nomination_details(value: RootNominationDetails) -> Dict[str, Any]:
    return {}


def _translate_trading_information(value: RootTradingInformation) -> Dict[str, Any]:
    return {"EXCHANGELIST": ""}


def _translate_dp_information(value: RootDpInformation) -> Dict[str, Any]:
    return {}


def _translate_tnc(value: RootTnc) -> Dict[str, Any]:
    return {}
